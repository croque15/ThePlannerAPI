using ThePlannerAPI.Models; using ThePlannerAPI.DTOs; using ThePlannerAPI.Data; using Microsoft.EntityFrameworkCore; namespace ThePlannerAPI.Services { public class PlannerEventService : IPlannerService { private readonly PlannerDbContext _context; public PlannerEventService(PlannerDbContext context) { _context = context; } public async Task<IEnumerable<PlannerEventDTO>> GetAllEventsAsync() { return await _context.PlannerEvents.Select(e => new PlannerEventDTO { Id = e.Id, Name = e.Name, StartDate = e.StartDate, EndDate = e.EndDate, Resource = e.Resource, Color = e.Color, JobID = e.JobID, ShipName = e.ShipName, JobCode = e.JobCode, Description = e.Description, ClientName = e.ClientName, DeparturePort = e.DeparturePort, ArrivalPort = e.ArrivalPort, EditBy = e.EditBy, PlannerEventType = e.PlannerEventType, TravelDays = e.TravelDays, IsCTS = e.IsCTS }).ToListAsync(); } public async Task<PlannerEventDTO> GetEventByIdAsync(int id) { var e = await _context.PlannerEvents.FindAsync(id); if (e == null) return null; return new PlannerEventDTO { Id = e.Id, Name = e.Name, StartDate = e.StartDate, EndDate = e.EndDate, Resource = e.Resource, Color = e.Color, JobID = e.JobID, ShipName = e.ShipName, JobCode = e.JobCode, Description = e.Description, ClientName = e.ClientName, DeparturePort = e.DeparturePort, ArrivalPort = e.ArrivalPort, EditBy = e.EditBy, PlannerEventType = e.PlannerEventType, TravelDays = e.TravelDays, IsCTS = e.IsCTS }; } public async Task<PlannerEventDTO> CreateEventAsync(PlannerEventDTO dto) { var entity = new PlannerEvent { Name = dto.Name, StartDate = dto.StartDate, EndDate = dto.EndDate, Resource = dto.Resource, Color = dto.Color, JobID = dto.JobID, ShipName = dto.ShipName, JobCode = dto.JobCode, Description = dto.Description, ClientName = dto.ClientName, DeparturePort = dto.DeparturePort, ArrivalPort = dto.ArrivalPort, EditBy = dto.EditBy, PlannerEventType = dto.PlannerEventType, TravelDays = dto.TravelDays, IsCTS = dto.IsCTS }; _context.PlannerEvents.Add(entity); await _context.SaveChangesAsync(); dto.Id = entity.Id; return dto; } public async Task<PlannerEventDTO> UpdateEventAsync(int id, PlannerEventDTO dto) { var entity = await _context.PlannerEvents.FindAsync(id); if (entity == null) return null; entity.Name = dto.Name; entity.StartDate = dto.StartDate; entity.EndDate = dto.EndDate; entity.Resource = dto.Resource; entity.Color = dto.Color; entity.JobID = dto.JobID; entity.ShipName = dto.ShipName; entity.JobCode = dto.JobCode; entity.Description = dto.Description; entity.ClientName = dto.ClientName; entity.DeparturePort = dto.DeparturePort; entity.ArrivalPort = dto.ArrivalPort; entity.EditBy = dto.EditBy; entity.PlannerEventType = dto.PlannerEventType; entity.TravelDays = dto.TravelDays; entity.IsCTS = dto.IsCTS; await _context.SaveChangesAsync(); return dto; } public async Task<bool> DeleteEventAsync(int id) { var entity = await _context.PlannerEvents.FindAsync(id); if (entity == null) return false; _context.PlannerEvents.Remove(entity); await _context.SaveChangesAsync(); return true; } } }